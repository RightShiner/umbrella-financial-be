generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model GhlUser {
  id                String       @id @unique() @default(uuid()) @db.VarChar(64)
  firstName         String?      @db.VarChar(128)
  lastName          String?      @db.VarChar(128)
  username          String?      @db.VarChar(256)
  email             String?      @db.VarChar(256)
  profilePictureUrl String?      @db.VarChar(255)
  type              String?      @db.VarChar(32)
  fullName          String?      @db.VarChar(256)
  phone             String?      @db.VarChar(16)
  locationId        String?      @db.VarChar(64)
  profilePicture    String?      @db.VarChar(255)
  location          GhlLocation? @relation(fields: [locationId], references: [id])
  User              User[]

  @@index([email])
  @@index([locationId])
}

model GhlLocation {
  id        String       @id @unique() @default(uuid()) @db.VarChar(64)
  companyId String?      @db.VarChar(64)
  name      String?      @db.VarChar(256)
  addressId String?      @db.VarChar(64)
  logoUrl   String?      @db.VarChar(2048)
  website   String?      @db.VarChar(2048)
  timezone  String?      @db.VarChar(64)
  firstName String?      @db.VarChar(256)
  lastName  String?      @db.VarChar(256)
  email     String?      @db.VarChar(512)
  phone     String?      @db.VarChar(16)
  ghlApiKey String?      @db.VarChar(512)
  contacts  GhlContact[]
  users     GhlUser[]
  User      User[]
}

model GhlContact {
  id               String      @id @unique() @default(uuid()) @db.VarChar(64)
  firstName        String?     @db.VarChar(256)
  lastName         String?     @db.VarChar(256)
  email            String?     @db.VarChar(256)
  phone            String?     @db.VarChar(16)
  companyName      String?     @db.VarChar(256)
  timezone         String?     @db.VarChar(64)
  locationId       String      @db.VarChar(64)
  location         GhlLocation @relation(fields: [locationId], references: [id])
  dnc              Boolean
  type             String?     @db.VarChar(64)
  source           String?     @db.VarChar(128)
  assignedUserId   String?     @db.VarChar(64)
  addressId        String?     @db.VarChar(64)
  website          String?     @db.VarChar(2048)
  dateOfBirth      DateTime?   @db.DateTime(0)
  dateAdded        DateTime    @db.DateTime(0)
  dateUpdated      DateTime    @db.DateTime(0)
  ssn              String?     @db.VarChar(16)
  gender           String?     @db.VarChar(8)
  keyword          String?     @db.VarChar(64)
  dateLastActivity DateTime?   @db.DateTime(0)
  umbrellaUserId   String      @db.VarChar(64)
  umbrellaUser     User        @relation(fields: [umbrellaUserId], references: [id])

  @@index([locationId])
  @@index([firstName, lastName, locationId])
  @@index([email, locationId])
}

model User {
  id                         String       @id @unique() @default(uuid()) @db.VarChar(64)
  uigUserId                  Int
  type                       UserType
  role                       UserRole
  hashPassword               String
  level1ReferredByUserId     String?      @db.VarChar(64)
  level1ReferredByUser       User?        @relation("level1ReferredByUserId", fields: [level1ReferredByUserId], references: [id])
  level1ReferreUsers         User[]       @relation("level1ReferredByUserId")
  level2ReferredByUserId     String?      @db.VarChar(64)
  level2ReferredByUser       User?        @relation("level2ReferredByUserId", fields: [level2ReferredByUserId], references: [id])
  level2ReferreUsers         User[]       @relation("level2ReferredByUserId")
  level3ReferredByUserId     String?      @db.VarChar(64)
  level3ReferredByUser       User?        @relation("level3ReferredByUserId", fields: [level3ReferredByUserId], references: [id])
  level3ReferreUsers         User[]       @relation("level3ReferredByUserId")
  affiliateStatus            String?      @db.VarChar(16)
  affiliateUrl               String?      @db.VarChar(2048)
  name                       String?      @db.VarChar(128)
  email                      String?      @db.VarChar(256)
  phoneNumber                String?      @db.VarChar(16)
  username                   String?      @db.VarChar(128)
  dateOfBirth                DateTime?    @db.DateTime(0)
  primaryGhlLocationId       String?      @db.VarChar(32)
  primaryGhlLocation         GhlLocation? @relation(fields: [primaryGhlLocationId], references: [id])
  ghlUserId                  String?      @db.VarChar(32)
  ghlUser                    GhlUser?     @relation(fields: [ghlUserId], references: [id])
  ghlSuperCorporateContactId String?      @db.VarChar(32)
  ghlContacts                GhlContact[]
  transactionTotal           Decimal
  accounts                   Account[]
  commissionAccountId        String?      @db.VarChar(64)
  purchaseAccountId          String?      @db.VarChar(64)
  purchases                  Purchase[]
  commissions                Commission[]
  sessions                   Session[]
}

model Product {
  id                          String           @id @unique() @default(uuid()) @db.VarChar(64)
  name                        String           @db.VarChar(256)
  isRecurring                 Boolean          @default(false)
  billingPeriodLength         Int?
  billingPeriodUnit           RecurringPeriod?
  trialPeriodLength           Int?
  trialPeriodUnit             RecurringPeriod?
  retailPrice                 Decimal
  commissionableValueShare    Decimal
  costAmount                  Decimal
  personalSaleShare           Decimal
  corporatePartnerProfitShare Decimal
  level1ReferralShare         Decimal
  level2ReferralShare         Decimal
  level3ReferralShare         Decimal
  dateUpdated                 DateTime
  dateCreated                 DateTime
  dateRetired                 DateTime?
  Purchase                    Purchase[]
  Commission                  Commission[]
}

//someone could sell for over retail / under retail
model Commission {
  id          String        @id @unique() @default(uuid()) @db.VarChar(64)
  userId      String        @db.VarChar(64)
  product     Product       @relation(fields: [productId], references: [id])
  productId   String        @db.VarChar(64)
  User        User          @relation(fields: [userId], references: [id])
  Transaction Transaction[]
}

model Purchase {
  id          String        @id @unique() @default(uuid()) @db.VarChar(64)
  userId      String        @db.VarChar(64)
  product     Product       @relation(fields: [productId], references: [id])
  productId   String        @db.VarChar(64)
  User        User          @relation(fields: [userId], references: [id])
  Transaction Transaction[]
}

model Account {
  id           String        @id @unique() @default(uuid()) @db.VarChar(64)
  name         String        @db.VarChar(256)
  balance      Decimal
  transactions Transaction[]
  User         User?         @relation(fields: [userId], references: [id])
  userId       String?       @db.VarChar(64)
}

model Transaction {
  id           String      @id @unique() @default(uuid()) @db.VarChar(64)
  name         String
  description  String
  amount       Decimal
  account      Account     @relation(fields: [accountId], references: [id])
  accountId    String      @db.VarChar(64)
  commission   Commission? @relation(fields: [commissionId], references: [id])
  purchase     Purchase?   @relation(fields: [purchaseId], references: [id])
  commissionId String?     @db.VarChar(64)
  purchaseId   String?     @db.VarChar(64)
  dateCreated  DateTime
  dateCleared  DateTime
}

model Session {
  id     String @id @unique() @default(uuid()) @db.VarChar(64)
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.VarChar(64)
}

//Enums
enum RecurringPeriod {
  DAY
  WEEK
  MONTH
  YEAR
}

enum UserType {
  CUSTOMER
  MENTOR
  COACH
  PARTNER
  CORPORATE_PARTNER
}

enum UserRole {
  ADMIN
  USER
}

enum ProductType {
  RETAIL
  WHOLESALE
  CUSTOM
}
